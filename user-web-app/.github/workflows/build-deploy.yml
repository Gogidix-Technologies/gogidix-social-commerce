name: Build and Deploy User Web App

on:
  push:
    branches: [ dev, staging, main ]
    paths:
      - 'social-commerce/user-web-app/**'
  pull_request:
    branches: [ dev, staging, main ]
    paths:
      - 'social-commerce/user-web-app/**'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: social-commerce/user-web-app/package-lock.json
    
    - name: Install dependencies
      working-directory: social-commerce/user-web-app
      run: |
        npm ci
        
    - name: Run tests
      working-directory: social-commerce/user-web-app
      run: |
        npm run test -- --coverage --watchAll=false
        
    - name: Build React app
      working-directory: social-commerce/user-web-app
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL || 'https://api-dev.gogidix-ecosystem.com' }}
        REACT_APP_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || 'development' }}
      run: |
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: user-web-app-build
        path: social-commerce/user-web-app/build/
        retention-days: 30
        
  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: user-web-app-build
        path: build/
        
    - name: Deploy to Development S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-east-1
      run: |
        aws s3 sync build/ s3://gogidix-dev-user-web-app/ --delete
        aws cloudfront create-invalidation --distribution-id ${{ secrets.DEV_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
        
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: user-web-app-build
        path: build/
        
    - name: Deploy to Staging S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-east-1
      run: |
        aws s3 sync build/ s3://gogidix-staging-user-web-app/ --delete
        aws cloudfront create-invalidation --distribution-id ${{ secrets.STAGING_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
        
  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: user-web-app-build
        path: build/
        
    - name: Deploy to Production S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-east-1
      run: |
        aws s3 sync build/ s3://gogidix-prod-user-web-app/ --delete
        aws cloudfront create-invalidation --distribution-id ${{ secrets.PROD_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"